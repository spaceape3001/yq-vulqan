////////////////////////////////////////////////////////////////////////////////
//
//  YOUR QUILL
//
////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <tachyon/os/GraphicsCard.hpp>
#include <tachyon/vulkan/vulqan.hpp>
#include <tachyon/typedef/vi_device.hpp>

namespace yq::tachyon {
    class AppCreateInfo;
    class GetDeviceRequest;

    class VulqanGPU : public GraphicsCard {
        YQ_TACHYON_DECLARE(VulqanGPU, GraphicsCard)
    public:
    
        // Thought is to have *THIS* become the logical device.... 
        //  (ie, the visualizer though not the surface), might have metrics
        //  And thus rename to VulqanDevice????
    
        VulqanGPU(VkPhysicalDevice);
        ~VulqanGPU();
        
        static void init_meta();
        
        VkPhysicalDevice    physical_device() const { return m_physical; }
        
        Execution setup(const Context&) override;
        Execution teardown(const Context&) override;
        
        void snap(GraphicsCardSnap&) const;
        std::string_view    gpu_name() const { return m_name; }
       
    protected:
        void        on_get_device_request(const Ref<const GetDeviceRequest>&);
        
    private:
    
        void    kill();
    
        VkPhysicalDeviceFeatures            m_deviceFeatures;
        VkPhysicalDeviceProperties          m_deviceInfo;
        size_t                              m_heap          = 0;
        VkPhysicalDeviceMemoryProperties    m_memoryInfo;
        ViDevicePtr                         m_device;

        struct {
            bool        enabled             = false;
            // KHR -- One greater than the maximum view index that can be used in a subpass.
            uint32_t    maxViewCount        = 0;
            // KHR -- maximum valid value of instance index allowed to be generated by a drawing command recorded within a subpass of a multiview render pass instance.
            uint32_t    maxInstanceIndex    = 0;
        }                                   m_multiview;

        std::string                         m_name;
        VkPhysicalDevice                    m_physical      = nullptr;
    };
}
